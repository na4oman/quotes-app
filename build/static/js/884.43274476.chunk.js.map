{"version":3,"file":"static/js/884.43274476.chunk.js","mappings":"0MACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,Y,SCF9C,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCgDnI,EA3CkB,SAAAH,GAChB,IAAMI,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAgBrB,OACE,SAAC,EAAD,WACE,kBAAMJ,UAAWC,EAAcK,SAhBnC,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBN,EAAeO,QAAQC,MACvCC,EAAcP,EAAaK,QAAQC,MAGzC,GAAoC,IAAhCF,EAAcI,OAAOC,QAA8C,IAA9BF,EAAYC,OAAOC,OAC1D,OAAOC,MAAM,0CAGfhB,EAAMiB,WAAW,CAAEC,OAAQR,EAAeS,KAAMN,KAK9C,UACGb,EAAMoB,YACL,gBAAKnB,UAAWC,EAAhB,UACE,SAACmB,EAAA,EAAD,OAIJ,iBAAKpB,UAAWC,EAAhB,WACE,kBAAOoB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKrB,QAEtC,iBAAKH,UAAWC,EAAhB,WACE,kBAAOoB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKnB,QAEpC,gBAAKL,UAAWC,EAAhB,UACE,mBAAQD,UAAU,MAAlB,+B,SChBV,EArBiB,WACf,IAAM0B,GAAWC,EAAAA,EAAAA,MACjB,GAA6CC,EAAAA,EAAAA,MAA7C,eAAOC,EAAP,YAAmBC,EAAnB,EAAmBA,UAAWX,EAA9B,EAA8BA,WAE9BY,EAAAA,EAAAA,YAAU,WACJD,GACFJ,EAAS,aAEV,CAACI,EAAWJ,IAMf,OACE,8BACE,SAAC,EAAD,CAAWP,UAAWA,EAAWH,WANb,SAAAgB,GACtBH,EAASG","sources":["webpack://react-router-quotes/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-router-quotes/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__ugXez\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__2BQXG\",\"loading\":\"QuoteForm_loading__U8JTT\",\"control\":\"QuoteForm_control__M1IkZ\",\"actions\":\"QuoteForm_actions__--XkG\"};","import { useRef } from 'react'\n\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport classes from './QuoteForm.module.css'\n\nconst QuoteForm = props => {\n  const authorInputRef = useRef()\n  const textInputRef = useRef()\n\n  function submitFormHandler(event) {\n    event.preventDefault()\n\n    const enteredAuthor = authorInputRef.current.value\n    const enteredText = textInputRef.current.value\n\n    // optional: Could validate here\n    if (enteredAuthor.trim().length === 0 || enteredText.trim().length === 0) {\n      return alert('Please enter valid fileds (not empty).')\n    }\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText })\n  }\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n  )\n}\n\nexport default QuoteForm\n","import { useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport QuoteForm from '../components/quotes/QuoteForm'\r\nimport { useAddQuoteMutation } from '../services/http'\r\n\r\nconst NewQuote = () => {\r\n  const navigate = useNavigate()\r\n  const [addQuote, { isSuccess, isLoading }] = useAddQuoteMutation()\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      navigate('/quotes')\r\n    }\r\n  }, [isSuccess, navigate])\r\n\r\n  const addQuoteHandler = quoteData => {\r\n    addQuote(quoteData)\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <QuoteForm isLoading={isLoading} onAddQuote={addQuoteHandler} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default NewQuote\r\n"],"names":["props","className","classes","children","authorInputRef","useRef","textInputRef","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","length","alert","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","navigate","useNavigate","useAddQuoteMutation","addQuote","isSuccess","useEffect","quoteData"],"sourceRoot":""}