{"version":3,"file":"static/js/857.b73ac6e1.chunk.js","mappings":"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","sources":["lib/api.js","webpack://react-router-quotes/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-router-quotes/./src/components/comments/Comments.module.css?d88e","webpack://react-router-quotes/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-router-quotes/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-router-quotes/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["export const transformedData = data => {\r\n  const loadedData = []\r\n\r\n  for (const key in data) {\r\n    const dataObj = {\r\n      id: key,\r\n      ...data[key],\r\n    }\r\n\r\n    loadedData.push(dataObj)\r\n  }\r\n\r\n  return loadedData\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__f-ODb\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__Ui70U\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__vnn35\",\"loading\":\"NewCommentForm_loading__IPAS3\",\"control\":\"NewCommentForm_control__F0fso\",\"actions\":\"NewCommentForm_actions__s9UGz\"};","import { useRef } from 'react'\nimport { useAddCommentMutation } from '../../services/http'\nimport LoadingSpinner from '../UI/LoadingSpinner'\n\nimport classes from './NewCommentForm.module.css'\n\nconst NewCommentForm = props => {\n  const commentTextRef = useRef()\n  const [addComment, { isLoading }] = useAddCommentMutation()\n\n  const submitFormHandler = event => {\n    event.preventDefault()\n\n    const enteredText = commentTextRef.current.value\n\n    // Optional: Could validate here\n    if (enteredText.trim().length === 0) {\n      return alert('Please enter a valid comment (not empty field).')\n    }\n\n    // Send comment to server\n    addComment({ commentData: { text: enteredText }, quoteId: props.quoteId })\n  }\n\n  return (\n    <>\n      {isLoading && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n          <div className={classes.control}>\n            <label htmlFor='comment'>Your Comment</label>\n            <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className='btn'>Add Comment</button>\n          </div>\n        </form>\n      )}\n    </>\n  )\n}\n\nexport default NewCommentForm\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__xjtqP\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__EaGr4\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport classes from './Comments.module.css'\nimport NewCommentForm from './NewCommentForm'\nimport { useGetCommentsQuery } from '../../services/http'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport CommentsList from './CommentsList'\nimport { transformedData } from '../../lib/api'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false)\n  const params = useParams()\n  const { data, isSuccess, isFetching } = useGetCommentsQuery(params.quoteId)\n\n  const loadedComments = transformedData(data)\n\n  let comments\n\n  if (isFetching) {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (isSuccess && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (isSuccess && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true)\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={params.quoteId} />}\n      {comments}\n    </section>\n  )\n}\n\nexport default Comments\n","import { useParams, Link, Routes, Route } from 'react-router-dom'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport Comments from '../components/comments/Comments'\r\nimport { useGetQuoteQuery } from '../services/http'\r\nimport LoadingSpiner from '../components/UI/LoadingSpinner'\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams()\r\n  const { data, error, isLoading, isSuccess } = useGetQuoteQuery(params.quoteId)\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpiner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) return <p className='centered focused'>{error.data}</p>\r\n\r\n  if (!isSuccess) {\r\n    return <p>No quote found.</p>\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <HighlightedQuote text={data.text} author={data.author} />\r\n      <Routes>\r\n        <Route\r\n          path=''\r\n          element={\r\n            <div className='centered'>\r\n              <Link className='btn--flat' to='comments'>\r\n                Load Comments\r\n              </Link>\r\n            </div>\r\n          }\r\n        />\r\n        <Route path='comments' element={<Comments />} />\r\n      </Routes>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuoteDetail\r\n"],"names":["transformedData","data","loadedData","key","dataObj","id","push","props","className","classes","text","author","commentTextRef","useRef","useAddCommentMutation","addComment","isLoading","LoadingSpinner","onSubmit","event","preventDefault","enteredText","current","value","trim","length","alert","commentData","quoteId","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","useGetCommentsQuery","isSuccess","isFetching","loadedComments","onClick","useGetQuoteQuery","error","path","element","to"],"sourceRoot":""}